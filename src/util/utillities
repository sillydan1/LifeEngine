#ifndef LIFE_ENGINE_UTILLITIES_H
#define LIFE_ENGINE_UTILLITIES_H
#include <sstream>

namespace life {

    template<typename T, typename Hasher>
    void hash_combine(std::size_t& seed, const T& v) {
        seed ^= (Hasher{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2));
    }

    class string_formatter {
        std::stringstream stream_;
    public:
        string_formatter() = default;
        ~string_formatter() = default;

        template<typename T>
        string_formatter& operator<<(const T& v) {
            stream_ << v;
            return *this;
        }

        std::string str() const { return stream_.str(); }
        operator std::string() const { return str(); }

        enum class convert_to_string { to_str };
        std::string operator>>(convert_to_string) { return str(); }

        string_formatter(const string_formatter&) = delete;
        string_formatter(string_formatter&&) = delete;
        string_formatter& operator=(const string_formatter&) = delete;
        string_formatter& operator=(string_formatter&&) = delete;
    };

}

#endif //LIFE_ENGINE_UTILLITIES_H
